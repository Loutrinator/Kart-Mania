using System;
using System.Collections;
using System.Collections.Generic;
using AI.UtilityAI;
using Editor;
using UnityEditor;
using UnityEditor.Rendering;
using UnityEngine;

public class UtilityAIEditorWindow : ExtendedEditorWindow
{
    private static UtilityAIEditorWindow window;
    public static void Open(UtilityAIAsset utilityAIAsset)
    {
        window = GetWindow<UtilityAIEditorWindow>("UtilityAI Editor");
        window.serializedObject = new SerializedObject(utilityAIAsset);
    }

    private void OnGUI()
    {
        if (window != null)
        {
            if (window.serializedObject != null)
            {
                GUIStyle headStyle = new GUIStyle();
                headStyle.fontSize = 20;
                headStyle.fontStyle = FontStyle.Bold;
                headStyle.normal.textColor = Color.white;
        
                currentProperty = serializedObject.FindProperty("actions");
                EditorGUILayout.BeginHorizontal();
        
                EditorGUILayout.BeginVertical("box",GUILayout.MaxWidth(150),GUILayout.ExpandHeight(true));

                GUILayout.Label("Actions",headStyle,GUILayout.MinHeight(30));
                DrawSidebar(currentProperty);
                EditorGUILayout.EndVertical();
        
                EditorGUILayout.BeginVertical("box",GUILayout.ExpandHeight(true),GUILayout.ExpandWidth(true));

                GUILayout.Label("Evaluation functions",headStyle,GUILayout.MinHeight(30));
                if (selectedProperty != null)
                {
                    //DrawProperties(selectedProperty,true);//Generated by unity
                    DrawSelectedPropertyPanel();//custom
                }
                else
                {
                    EditorGUILayout.LabelField("Select an item from the list");
                }
                EditorGUILayout.EndVertical();
                EditorGUILayout.EndHorizontal();

                Apply();
            }
            else
            {
                EditorGUILayout.BeginHorizontal(GUILayout.ExpandHeight(true),GUILayout.ExpandWidth(true));
                GUILayout.Label("Please open a UtilityAIAsset.");
                EditorGUILayout.EndHorizontal();
            }
        }
        
    }

    void DrawSelectedPropertyPanel()
    {
        currentProperty = selectedProperty;
        DrawField("actionName",true);
        EditorGUILayout.BeginHorizontal(GUILayout.ExpandHeight(true));
        EditorGUILayout.BeginVertical("box",GUILayout.ExpandWidth(true));
        
        //Functions list
        SerializedProperty evalFunctionListProperties = currentProperty.FindPropertyRelative("evaluationFunctions");
        
        EditorGUILayout.BeginHorizontal(GUILayout.ExpandWidth(true));
        GUILayout.Label("Functions");
        
        if (GUILayout.Button("+", GUILayout.MaxHeight(20), GUILayout.MaxWidth(20)))
        {
            evalFunctionListProperties.InsertArrayElementAtIndex(evalFunctionListProperties.arraySize);
            Debug.Log("+");
        }
        if (GUILayout.Button("-", GUILayout.MaxHeight(20), GUILayout.MaxWidth(20)))
        {
            evalFunctionListProperties.DeleteArrayElementAtIndex(evalFunctionListProperties.arraySize-1);
            Debug.Log("-");
        }
        
        EditorGUILayout.EndHorizontal();
        
        foreach (SerializedProperty evalFunctionProperty in evalFunctionListProperties)
        {
            currentProperty = evalFunctionProperty;
            EditorGUILayout.BeginHorizontal(GUILayout.ExpandWidth(true));
            DrawField("evaluationData",true);
            DrawField("coefficient",true);
            DrawField("evaluationCurve",true);
            EditorGUILayout.EndHorizontal();
        }
        EditorGUILayout.EndVertical();
        EditorGUILayout.EndHorizontal();

    }

    new void DrawSidebar(SerializedProperty prop)
    {
        
        GUIStyle notSelectedStyle = new GUIStyle();
        notSelectedStyle.fontSize = 11;
        notSelectedStyle.normal.textColor = new Color(0.8f,0.8f,0.8f);
        GUIStyle selectedStyle = new GUIStyle();
        selectedStyle.fontSize = 15;
        selectedStyle.fontStyle = FontStyle.Bold;
        selectedStyle.normal.textColor = Color.white;
        selectedStyle.padding.left = 5;
        
        EditorGUILayout.BeginVertical(GUILayout.ExpandHeight(true));
        int tempIndex = 0;
        IEnumerator propEnumerator = prop.GetEnumerator();
        while (propEnumerator.MoveNext())
        {
            SerializedProperty current = (SerializedProperty)propEnumerator.Current;
            name = current.FindPropertyRelative("actionName").stringValue;
            if (string.IsNullOrEmpty(name))
            {
                name = "New Action";
            }
            GUIStyle buttonStyle = sidebarIndex == tempIndex ? selectedStyle : notSelectedStyle;
            float height = sidebarIndex == tempIndex ? 24 : 20;
            if (GUILayout.Button(name,buttonStyle,GUILayout.MaxHeight(height)))
            {
                Debug.Log("Sidebar UtilityAIAction button pressed.");
                selectedPropertyPath = current.propertyPath;
                sidebarIndex = tempIndex;
                Debug.Log("tempIndex : " + tempIndex + " sidebarIndex : "+ sidebarIndex);
            }
            tempIndex++;
        }

        if (!string.IsNullOrEmpty(selectedPropertyPath))
        {
            selectedProperty = serializedObject.FindProperty(selectedPropertyPath);
        }
        EditorGUILayout.EndVertical();
        
        EditorGUILayout.BeginHorizontal(GUILayout.MaxHeight(20));
        if (GUILayout.Button("+", GUILayout.MaxHeight(20), GUILayout.MaxWidth(20)))
        {
            prop.InsertArrayElementAtIndex(prop.arraySize);
            Debug.Log("+");
        }
        if (GUILayout.Button("-", GUILayout.MaxHeight(20), GUILayout.MaxWidth(20)))
        {
            prop.DeleteArrayElementAtIndex(sidebarIndex);
            Debug.Log("-");
        }
        EditorGUILayout.EndHorizontal();
        
    }
}
